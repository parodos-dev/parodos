/*
 * Copyright (c) 2022 Red Hat Developer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.parodos.patterndetection.context;

/**
 * -
 *
 *
 * These are keys that are used to put arguements required for scanning and the results of
 * a scan in the @see WorkContext
 *
 * DESIRED_PATTERNS - An argument to start scanning. This is the @see Pattern(s) we are
 * looking for
 *
 * DETECTED_PATTERNS - A result generated by scanning. This is the @see Pattern(s)
 * detected during scanning
 *
 * DETECTED_CLUES - A result generated by scanning. This is the @see Clue(s) detected
 * during scanning. This might be useful to see if no @see Pattern(s) were detected
 *
 * INPUT_STREAMS - An argument to start scanning. This is a list of @see
 * InputStreamWrapper references to be used when the file(s) to scan are obtained by an
 * API and its not desirable to save them on the file system
 *
 * START_DIRECTORY - An argument to start scanning. This will be a directory to start
 * scanning in, this is for the use case when the code/files to scan are saved on the file
 * system. The library will recursively processes all files in the directory
 *
 * FILES_TO_SCAN - An argument to start scanning. A collection of Files to scan
 *
 * FOLDERS_TO_SCAN - An argument to start scanning. A collection of Folders to scan, this
 * useful when looking for folder names and not scanning the files contained in the
 * folders
 *
 * DIRECTORY_FILE_PATHS - An argument to start scanning. This is a map of that lists the
 * names of directories (key value) and their associated files (values for the key)
 *
 * INPUT_STREAM_CLIENTS - A list of @see ContentInputStreamClientConfiguration
 *
 * @author Luke Shannon (Github: lshannon)
 *
 */
public enum PatternDetectionConstants {

	DESIRED_PATTERNS, DETECTED_PATTERNS, DETECTED_CLUES, INPUT_STREAMS_WRAPPERS, START_DIRECTORY, FILES_TO_SCAN,
	FOLDERS_TO_SCAN, DIRECTORY_FILE_PATHS, INPUT_STREAM_CLIENTS, SCANNING_THREAD_POOL;

}
