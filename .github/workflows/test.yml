---
name: Build
on:
  push:
    branches:
      - main
      - ActionsTest
      - java11
      - 'releases/**'

  pull_request:
    branches:
      - '**'
permissions: read-all
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Restore Maven cache
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore

      - name: Maven Build
        run: mvn -Dmaven.test.skip=true clean package

      - name: Maven Validate
        run: mvn validate

      - name: Maven Test
        id: test
        run: |
          mvn test --file ./pom.xml
          mvn jacoco:report-aggregate

      - name: Check generated files are up to date
        run: |
          status="$(git status --porcelain)"
          if [ -n "${status}" ]; then echo "There are uncommitted changes:"; echo "${status}"; exit 1; fi

      - name: Upload current-info
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            ${{ github.workspace }}/coverage/target/site/jacoco-aggregate/
            ${{ github.workspace }}/notification-service/target/*.jar
            ${{ github.workspace }}/workflow-service/target/*.jar
            ${{ github.workspace }}/workflow-examples/target/*.jar

      - name: Save Maven cache
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: save

  coverage:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts

      - name: JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@v4.8
        with:
          coverage_results_path: ${{ github.workspace }}/coverage/target/site/jacoco-aggregate/jacoco.xml
          coverage_report_name: Coverage
          coverage_report_title: JaCoCo
          skip_check_run: true
          minimum_coverage: 66
          fail_below_threshold: true
          publish_only_summary: true

      - name: Add Coverage Job Summary
        run: |
          cat ${{ github.workspace }}/_TMP/coverage-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Code Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report-markdown
          path: "${{ github.workspace }}/_TMP/coverage-results.md"
          retention-days: 1

  containers:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts

      - name: "Build container images to quay ${{ needs.build.outputs.test }}"
        run: |
          make build-images

      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: "docker-compose_workflow-service:latest"

      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: "docker-compose_notification-service:latest"

      - name: "finished"
        id: container-finished
        run: echo 1

  integration:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha != '' &&  github.event.pull_request.head.sha ||  github.sha }}

      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.16.0"

      - name: Waiting for kind to be ready
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}

      - name: Install kubernetes dependencies
        run: |
          make install-kubernetes-dependencies
          make wait-kubernetes-dependencies

      - id: wait-for-jobs
        uses: yogeshlonkar/wait-for-jobs@v0
        with:
          gh-token: ${{ secrets.GITHUB_TOKEN }}
          jobs: |
            containers

      - name: Download images
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "docker-compose_notification-service:latest"

      - name: Download images
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "docker-compose_workflow-service:latest"

      - name: Load images inside kind
        run: |
          make push-images-to-kind

      - name: Deploy
        run: |
          kubectl kustomize hack/manifests/testing| kubectl apply -f -
          kubectl wait --timeout=300s --for=condition=Ready pods --all -n default || {
            echo "Timeout waiting for Parodos services to be ready";
            kubectl get pods --all-namespaces;
            echo "************ workflow-service logs ***************";
            kubectl logs -l app=workflow-service --tail=40;
            echo "************ notification-service logs ***************";
            kubectl logs -l app=notification-service --tail=40;
            exit 1;
          }
          kubectl get pods --all-namespaces

      - name: Run example script
        run: |
          export SERVERIP=$(kubectl get nodes kind-control-plane -o json  |  jq -r '[.status.addresses[] | select(.type=="InternalIP")] | .[0].address')
          SERVER_IP="${SERVERIP}" SERVERPORT=80 ./workflow-examples/run_examples.sh escalation
          SERVER_IP="${SERVERIP}" SERVERPORT=80 ./workflow-examples/run_examples.sh simple
          SERVER_IP="${SERVERIP}" SERVERPORT=80 ./workflow-examples/run_examples.sh complex

      - name: Collect logs
        if: ${{ failure() }}
        run: |
          kubectl get pods --all-namespaces
          kind export logs dist

      - name: Archive logs
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: logs
          path: |
            dist
