/*
 * Parodos Notification Service API
 * This is the API documentation for the Parodos Notification Service. It provides operations to send out and check notification. The endpoints are secured with oAuth2/OpenID and cannot be accessed without a valid token.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.notification.sdk.api;

import com.redhat.parodos.notification.sdk.api.ApiCallback;
import com.redhat.parodos.notification.sdk.api.ApiClient;
import com.redhat.parodos.notification.sdk.api.ApiException;
import com.redhat.parodos.notification.sdk.api.ApiResponse;
import com.redhat.parodos.notification.sdk.api.Configuration;
import com.redhat.parodos.notification.sdk.api.Pair;
import com.redhat.parodos.notification.sdk.api.ProgressRequestBody;
import com.redhat.parodos.notification.sdk.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.redhat.parodos.notification.sdk.model.NotificationRecordResponseDTO;
import com.redhat.parodos.notification.sdk.model.Pageable;
import com.redhat.parodos.notification.sdk.model.PagedModelNotificationRecordResponseDTO;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationRecordApi {

	private ApiClient localVarApiClient;

	private int localHostIndex;

	private String localCustomBaseUrl;

	public NotificationRecordApi() {
		this(Configuration.getDefaultApiClient());
	}

	public NotificationRecordApi(ApiClient apiClient) {
		this.localVarApiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return localVarApiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.localVarApiClient = apiClient;
	}

	public int getHostIndex() {
		return localHostIndex;
	}

	public void setHostIndex(int hostIndex) {
		this.localHostIndex = hostIndex;
	}

	public String getCustomBaseUrl() {
		return localCustomBaseUrl;
	}

	public void setCustomBaseUrl(String customBaseUrl) {
		this.localCustomBaseUrl = customBaseUrl;
	}

	/**
	 * Build call for countUnreadNotifications
	 * @param state (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call countUnreadNotificationsCall(String state, final ApiCallback _callback) throws ApiException {
		String basePath = null;

		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v1/notifications/count";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (state != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
		}

		final String[] localVarAccepts = { "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call countUnreadNotificationsValidateBeforeCall(String state, final ApiCallback _callback)
			throws ApiException {

		// verify the required parameter 'state' is set
		if (state == null) {
			throw new ApiException(
					"Missing the required parameter 'state' when calling countUnreadNotifications(Async)");
		}

		okhttp3.Call localVarCall = countUnreadNotificationsCall(state, _callback);
		return localVarCall;

	}

	/**
	 * @param state (required)
	 * @return Integer
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public Integer countUnreadNotifications(String state) throws ApiException {
		ApiResponse<Integer> localVarResp = countUnreadNotificationsWithHttpInfo(state);
		return localVarResp.getData();
	}

	/**
	 * @param state (required)
	 * @return ApiResponse&lt;Integer&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<Integer> countUnreadNotificationsWithHttpInfo(String state) throws ApiException {
		okhttp3.Call localVarCall = countUnreadNotificationsValidateBeforeCall(state, null);
		Type localVarReturnType = new TypeToken<Integer>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * (asynchronously)
	 * @param state (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call countUnreadNotificationsAsync(String state, final ApiCallback<Integer> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = countUnreadNotificationsValidateBeforeCall(state, _callback);
		Type localVarReturnType = new TypeToken<Integer>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for deleteNotification
	 * @param id (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>204</td>
	 * <td>No Content</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call deleteNotificationCall(UUID id, final ApiCallback _callback) throws ApiException {
		String basePath = null;

		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v1/notifications/{id}".replaceAll("\\{" + "id" + "\\}",
				localVarApiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {

		};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call deleteNotificationValidateBeforeCall(UUID id, final ApiCallback _callback)
			throws ApiException {

		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling deleteNotification(Async)");
		}

		okhttp3.Call localVarCall = deleteNotificationCall(id, _callback);
		return localVarCall;

	}

	/**
	 * @param id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>204</td>
	 * <td>No Content</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public void deleteNotification(UUID id) throws ApiException {
		deleteNotificationWithHttpInfo(id);
	}

	/**
	 * @param id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>204</td>
	 * <td>No Content</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<Void> deleteNotificationWithHttpInfo(UUID id) throws ApiException {
		okhttp3.Call localVarCall = deleteNotificationValidateBeforeCall(id, null);
		return localVarApiClient.execute(localVarCall);
	}

	/**
	 * (asynchronously)
	 * @param id (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>204</td>
	 * <td>No Content</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call deleteNotificationAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

		okhttp3.Call localVarCall = deleteNotificationValidateBeforeCall(id, _callback);
		localVarApiClient.executeAsync(localVarCall, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getNotifications
	 * @param pageable (required)
	 * @param state (optional)
	 * @param searchTerm (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call getNotificationsCall(Pageable pageable, String state, String searchTerm,
			final ApiCallback _callback) throws ApiException {
		String basePath = null;

		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v1/notifications";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (pageable != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
		}

		if (state != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
		}

		if (searchTerm != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerm", searchTerm));
		}

		final String[] localVarAccepts = { "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getNotificationsValidateBeforeCall(Pageable pageable, String state, String searchTerm,
			final ApiCallback _callback) throws ApiException {

		// verify the required parameter 'pageable' is set
		if (pageable == null) {
			throw new ApiException("Missing the required parameter 'pageable' when calling getNotifications(Async)");
		}

		okhttp3.Call localVarCall = getNotificationsCall(pageable, state, searchTerm, _callback);
		return localVarCall;

	}

	/**
	 * @param pageable (required)
	 * @param state (optional)
	 * @param searchTerm (optional)
	 * @return PagedModelNotificationRecordResponseDTO
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public PagedModelNotificationRecordResponseDTO getNotifications(Pageable pageable, String state, String searchTerm)
			throws ApiException {
		ApiResponse<PagedModelNotificationRecordResponseDTO> localVarResp = getNotificationsWithHttpInfo(pageable,
				state, searchTerm);
		return localVarResp.getData();
	}

	/**
	 * @param pageable (required)
	 * @param state (optional)
	 * @param searchTerm (optional)
	 * @return ApiResponse&lt;PagedModelNotificationRecordResponseDTO&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<PagedModelNotificationRecordResponseDTO> getNotificationsWithHttpInfo(Pageable pageable,
			String state, String searchTerm) throws ApiException {
		okhttp3.Call localVarCall = getNotificationsValidateBeforeCall(pageable, state, searchTerm, null);
		Type localVarReturnType = new TypeToken<PagedModelNotificationRecordResponseDTO>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * (asynchronously)
	 * @param pageable (required)
	 * @param state (optional)
	 * @param searchTerm (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call getNotificationsAsync(Pageable pageable, String state, String searchTerm,
			final ApiCallback<PagedModelNotificationRecordResponseDTO> _callback) throws ApiException {

		okhttp3.Call localVarCall = getNotificationsValidateBeforeCall(pageable, state, searchTerm, _callback);
		Type localVarReturnType = new TypeToken<PagedModelNotificationRecordResponseDTO>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateNotificationStatusById
	 * @param id (required)
	 * @param operation (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call updateNotificationStatusByIdCall(UUID id, String operation, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;

		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v1/notifications/{id}".replaceAll("\\{" + "id" + "\\}",
				localVarApiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (operation != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
		}

		final String[] localVarAccepts = { "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateNotificationStatusByIdValidateBeforeCall(UUID id, String operation,
			final ApiCallback _callback) throws ApiException {

		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling updateNotificationStatusById(Async)");
		}

		// verify the required parameter 'operation' is set
		if (operation == null) {
			throw new ApiException(
					"Missing the required parameter 'operation' when calling updateNotificationStatusById(Async)");
		}

		okhttp3.Call localVarCall = updateNotificationStatusByIdCall(id, operation, _callback);
		return localVarCall;

	}

	/**
	 * @param id (required)
	 * @param operation (required)
	 * @return NotificationRecordResponseDTO
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public NotificationRecordResponseDTO updateNotificationStatusById(UUID id, String operation) throws ApiException {
		ApiResponse<NotificationRecordResponseDTO> localVarResp = updateNotificationStatusByIdWithHttpInfo(id,
				operation);
		return localVarResp.getData();
	}

	/**
	 * @param id (required)
	 * @param operation (required)
	 * @return ApiResponse&lt;NotificationRecordResponseDTO&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<NotificationRecordResponseDTO> updateNotificationStatusByIdWithHttpInfo(UUID id,
			String operation) throws ApiException {
		okhttp3.Call localVarCall = updateNotificationStatusByIdValidateBeforeCall(id, operation, null);
		Type localVarReturnType = new TypeToken<NotificationRecordResponseDTO>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * (asynchronously)
	 * @param id (required)
	 * @param operation (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>OK</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call updateNotificationStatusByIdAsync(UUID id, String operation,
			final ApiCallback<NotificationRecordResponseDTO> _callback) throws ApiException {

		okhttp3.Call localVarCall = updateNotificationStatusByIdValidateBeforeCall(id, operation, _callback);
		Type localVarReturnType = new TypeToken<NotificationRecordResponseDTO>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

}
