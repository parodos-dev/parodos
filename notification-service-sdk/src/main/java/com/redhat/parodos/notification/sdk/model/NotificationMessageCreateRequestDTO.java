/*
 * Parodos Notification Service API
 * This is the API documentation for the Parodos Notification Service. It provides operations to send out and check notification. The endpoints are secured with oAuth2/OpenID and cannot be accessed without a valid token.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.notification.sdk.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.redhat.parodos.notification.sdk.api.JSON;

/**
 * NotificationMessageCreateRequestDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NotificationMessageCreateRequestDTO {

	public static final String SERIALIZED_NAME_BODY = "body";

	@SerializedName(SERIALIZED_NAME_BODY)
	private String body;

	public static final String SERIALIZED_NAME_GROUP_NAMES = "groupNames";

	@SerializedName(SERIALIZED_NAME_GROUP_NAMES)
	private List<String> groupNames = new ArrayList<>();

	public static final String SERIALIZED_NAME_MESSAGE_TYPE = "messageType";

	@SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
	private String messageType;

	public static final String SERIALIZED_NAME_SUBJECT = "subject";

	@SerializedName(SERIALIZED_NAME_SUBJECT)
	private String subject;

	public static final String SERIALIZED_NAME_USERNAMES = "usernames";

	@SerializedName(SERIALIZED_NAME_USERNAMES)
	private List<String> usernames = new ArrayList<>();

	public NotificationMessageCreateRequestDTO() {
	}

	public NotificationMessageCreateRequestDTO body(String body) {

		this.body = body;
		return this;
	}

	/**
	 * Get body
	 * @return body
	 **/
	@javax.annotation.Nullable

	public String getBody() {
		return body;
	}

	public void setBody(String body) {
		this.body = body;
	}

	public NotificationMessageCreateRequestDTO groupNames(List<String> groupNames) {

		this.groupNames = groupNames;
		return this;
	}

	public NotificationMessageCreateRequestDTO addGroupNamesItem(String groupNamesItem) {
		if (this.groupNames == null) {
			this.groupNames = new ArrayList<>();
		}
		this.groupNames.add(groupNamesItem);
		return this;
	}

	/**
	 * Get groupNames
	 * @return groupNames
	 **/
	@javax.annotation.Nullable

	public List<String> getGroupNames() {
		return groupNames;
	}

	public void setGroupNames(List<String> groupNames) {
		this.groupNames = groupNames;
	}

	public NotificationMessageCreateRequestDTO messageType(String messageType) {

		this.messageType = messageType;
		return this;
	}

	/**
	 * Get messageType
	 * @return messageType
	 **/
	@javax.annotation.Nullable

	public String getMessageType() {
		return messageType;
	}

	public void setMessageType(String messageType) {
		this.messageType = messageType;
	}

	public NotificationMessageCreateRequestDTO subject(String subject) {

		this.subject = subject;
		return this;
	}

	/**
	 * Get subject
	 * @return subject
	 **/
	@javax.annotation.Nullable

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public NotificationMessageCreateRequestDTO usernames(List<String> usernames) {

		this.usernames = usernames;
		return this;
	}

	public NotificationMessageCreateRequestDTO addUsernamesItem(String usernamesItem) {
		if (this.usernames == null) {
			this.usernames = new ArrayList<>();
		}
		this.usernames.add(usernamesItem);
		return this;
	}

	/**
	 * Get usernames
	 * @return usernames
	 **/
	@javax.annotation.Nullable

	public List<String> getUsernames() {
		return usernames;
	}

	public void setUsernames(List<String> usernames) {
		this.usernames = usernames;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		NotificationMessageCreateRequestDTO notificationMessageCreateRequestDTO = (NotificationMessageCreateRequestDTO) o;
		return Objects.equals(this.body, notificationMessageCreateRequestDTO.body)
				&& Objects.equals(this.groupNames, notificationMessageCreateRequestDTO.groupNames)
				&& Objects.equals(this.messageType, notificationMessageCreateRequestDTO.messageType)
				&& Objects.equals(this.subject, notificationMessageCreateRequestDTO.subject)
				&& Objects.equals(this.usernames, notificationMessageCreateRequestDTO.usernames);
	}

	@Override
	public int hashCode() {
		return Objects.hash(body, groupNames, messageType, subject, usernames);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class NotificationMessageCreateRequestDTO {\n");
		sb.append("    body: ").append(toIndentedString(body)).append("\n");
		sb.append("    groupNames: ").append(toIndentedString(groupNames)).append("\n");
		sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
		sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
		sb.append("    usernames: ").append(toIndentedString(usernames)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the
	 * first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;

	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>();
		openapiFields.add("body");
		openapiFields.add("groupNames");
		openapiFields.add("messageType");
		openapiFields.add("subject");
		openapiFields.add("usernames");

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>();
	}

	/**
	 * Validates the JSON Object and throws an exception if issues found
	 * @param jsonObj JSON Object
	 * @throws IOException if the JSON Object is invalid with respect to
	 * NotificationMessageCreateRequestDTO
	 */
	public static void validateJsonObject(JsonObject jsonObj) throws IOException {
		if (jsonObj == null) {
			if (!NotificationMessageCreateRequestDTO.openapiRequiredFields.isEmpty()) { // has
																						// required
																						// fields
																						// but
																						// JSON
																						// object
																						// is
																						// null
				throw new IllegalArgumentException(String.format(
						"The required field(s) %s in NotificationMessageCreateRequestDTO is not found in the empty JSON string",
						NotificationMessageCreateRequestDTO.openapiRequiredFields.toString()));
			}
		}

		Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
		// check to see if the JSON string contains additional fields
		for (Entry<String, JsonElement> entry : entries) {
			if (!NotificationMessageCreateRequestDTO.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(String.format(
						"The field `%s` in the JSON string is not defined in the `NotificationMessageCreateRequestDTO` properties. JSON: %s",
						entry.getKey(), jsonObj.toString()));
			}
		}
		if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull())
				&& !jsonObj.get("body").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("body").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("groupNames") != null && !jsonObj.get("groupNames").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `groupNames` to be an array in the JSON string but got `%s`",
							jsonObj.get("groupNames").toString()));
		}
		if ((jsonObj.get("messageType") != null && !jsonObj.get("messageType").isJsonNull())
				&& !jsonObj.get("messageType").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `messageType` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("messageType").toString()));
		}
		if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull())
				&& !jsonObj.get("subject").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("subject").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("usernames") != null && !jsonObj.get("usernames").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `usernames` to be an array in the JSON string but got `%s`",
							jsonObj.get("usernames").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {

		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!NotificationMessageCreateRequestDTO.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes
								// 'NotificationMessageCreateRequestDTO' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<NotificationMessageCreateRequestDTO> thisAdapter = gson.getDelegateAdapter(this,
					TypeToken.get(NotificationMessageCreateRequestDTO.class));

			return (TypeAdapter<T>) new TypeAdapter<NotificationMessageCreateRequestDTO>() {
				@Override
				public void write(JsonWriter out, NotificationMessageCreateRequestDTO value) throws IOException {
					JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
					elementAdapter.write(out, obj);
				}

				@Override
				public NotificationMessageCreateRequestDTO read(JsonReader in) throws IOException {
					JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
					validateJsonObject(jsonObj);
					return thisAdapter.fromJsonTree(jsonObj);
				}

			}.nullSafe();
		}

	}

	/**
	 * Create an instance of NotificationMessageCreateRequestDTO given an JSON string
	 * @param jsonString JSON string
	 * @return An instance of NotificationMessageCreateRequestDTO
	 * @throws IOException if the JSON string is invalid with respect to
	 * NotificationMessageCreateRequestDTO
	 */
	public static NotificationMessageCreateRequestDTO fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, NotificationMessageCreateRequestDTO.class);
	}

	/**
	 * Convert an instance of NotificationMessageCreateRequestDTO to an JSON string
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}

}
