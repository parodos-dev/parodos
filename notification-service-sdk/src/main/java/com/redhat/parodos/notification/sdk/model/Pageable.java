/*
 * Parodos Notification Service API
 * This is the API documentation for the Parodos Notification Service. It provides operations to send out and check notification. The endpoints are secured with oAuth2/OpenID and cannot be accessed without a valid token.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.notification.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.redhat.parodos.notification.sdk.api.JSON;

/**
 * Pageable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Pageable {

	public static final String SERIALIZED_NAME_PAGE = "page";

	@SerializedName(SERIALIZED_NAME_PAGE)
	private Integer page;

	public static final String SERIALIZED_NAME_SIZE = "size";

	@SerializedName(SERIALIZED_NAME_SIZE)
	private Integer size;

	public static final String SERIALIZED_NAME_SORT = "sort";

	@SerializedName(SERIALIZED_NAME_SORT)
	private List<String> sort = new ArrayList<>();

	public Pageable() {
	}

	public Pageable page(Integer page) {

		this.page = page;
		return this;
	}

	/**
	 * Get page minimum: 0
	 * @return page
	 **/
	@javax.annotation.Nullable

	public Integer getPage() {
		return page;
	}

	public void setPage(Integer page) {
		this.page = page;
	}

	public Pageable size(Integer size) {

		this.size = size;
		return this;
	}

	/**
	 * Get size minimum: 1
	 * @return size
	 **/
	@javax.annotation.Nullable

	public Integer getSize() {
		return size;
	}

	public void setSize(Integer size) {
		this.size = size;
	}

	public Pageable sort(List<String> sort) {

		this.sort = sort;
		return this;
	}

	public Pageable addSortItem(String sortItem) {
		if (this.sort == null) {
			this.sort = new ArrayList<>();
		}
		this.sort.add(sortItem);
		return this;
	}

	/**
	 * Get sort
	 * @return sort
	 **/
	@javax.annotation.Nullable

	public List<String> getSort() {
		return sort;
	}

	public void setSort(List<String> sort) {
		this.sort = sort;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Pageable pageable = (Pageable) o;
		return Objects.equals(this.page, pageable.page) && Objects.equals(this.size, pageable.size)
				&& Objects.equals(this.sort, pageable.sort);
	}

	@Override
	public int hashCode() {
		return Objects.hash(page, size, sort);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Pageable {\n");
		sb.append("    page: ").append(toIndentedString(page)).append("\n");
		sb.append("    size: ").append(toIndentedString(size)).append("\n");
		sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the
	 * first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;

	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>();
		openapiFields.add("page");
		openapiFields.add("size");
		openapiFields.add("sort");

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>();
	}

	/**
	 * Validates the JSON Object and throws an exception if issues found
	 * @param jsonObj JSON Object
	 * @throws IOException if the JSON Object is invalid with respect to Pageable
	 */
	public static void validateJsonObject(JsonObject jsonObj) throws IOException {
		if (jsonObj == null) {
			if (!Pageable.openapiRequiredFields.isEmpty()) { // has required fields but
																// JSON object is null
				throw new IllegalArgumentException(
						String.format("The required field(s) %s in Pageable is not found in the empty JSON string",
								Pageable.openapiRequiredFields.toString()));
			}
		}

		Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
		// check to see if the JSON string contains additional fields
		for (Entry<String, JsonElement> entry : entries) {
			if (!Pageable.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(String.format(
						"The field `%s` in the JSON string is not defined in the `Pageable` properties. JSON: %s",
						entry.getKey(), jsonObj.toString()));
			}
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `sort` to be an array in the JSON string but got `%s`",
							jsonObj.get("sort").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {

		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!Pageable.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'Pageable' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<Pageable> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(Pageable.class));

			return (TypeAdapter<T>) new TypeAdapter<Pageable>() {
				@Override
				public void write(JsonWriter out, Pageable value) throws IOException {
					JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
					elementAdapter.write(out, obj);
				}

				@Override
				public Pageable read(JsonReader in) throws IOException {
					JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
					validateJsonObject(jsonObj);
					return thisAdapter.fromJsonTree(jsonObj);
				}

			}.nullSafe();
		}

	}

	/**
	 * Create an instance of Pageable given an JSON string
	 * @param jsonString JSON string
	 * @return An instance of Pageable
	 * @throws IOException if the JSON string is invalid with respect to Pageable
	 */
	public static Pageable fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, Pageable.class);
	}

	/**
	 * Convert an instance of Pageable to an JSON string
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}

}
