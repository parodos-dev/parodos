/*
 * Parodos Workflow Service API
 * This is the API documentation for the Parodos Workflow Service. It provides operations to execute assessments to determine infrastructure options (tooling + environments). Also executes infrastructure task workflows to call downstream systems to stand-up an infrastructure option.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.sdk.api;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.gson.reflect.TypeToken;
import com.redhat.parodos.sdk.invoker.ApiCallback;
import com.redhat.parodos.sdk.invoker.ApiClient;
import com.redhat.parodos.sdk.invoker.ApiException;
import com.redhat.parodos.sdk.invoker.ApiResponse;
import com.redhat.parodos.sdk.invoker.Configuration;
import com.redhat.parodos.sdk.invoker.Pair;
import com.redhat.parodos.sdk.model.AccessRequestDTO;
import com.redhat.parodos.sdk.model.AccessResponseDTO;
import com.redhat.parodos.sdk.model.ProjectRequestDTO;
import com.redhat.parodos.sdk.model.ProjectResponseDTO;
import com.redhat.parodos.sdk.model.ProjectUserRoleResponseDTO;
import com.redhat.parodos.sdk.model.UserRoleRequestDTO;

public class ProjectApi {

	private ApiClient localVarApiClient;

	private int localHostIndex;

	private String localCustomBaseUrl;

	public ProjectApi() {
		this(Configuration.getDefaultApiClient());
	}

	public ProjectApi(ApiClient apiClient) {
		this.localVarApiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return localVarApiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.localVarApiClient = apiClient;
	}

	public int getHostIndex() {
		return localHostIndex;
	}

	public void setHostIndex(int hostIndex) {
		this.localHostIndex = hostIndex;
	}

	public String getCustomBaseUrl() {
		return localCustomBaseUrl;
	}

	public void setCustomBaseUrl(String customBaseUrl) {
		this.localCustomBaseUrl = customBaseUrl;
	}

	/**
	 * Build call for createAccessRequestToProject
	 * @param id (required)
	 * @param accessRequestDTO (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call createAccessRequestToProjectCall(UUID id, AccessRequestDTO accessRequestDTO,
			final ApiCallback _callback) throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = accessRequestDTO;

		// create path and map variables
		String localVarPath = "/api/v1/projects/{id}/access".replace("{" + "id" + "}",
				localVarApiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json", "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createAccessRequestToProjectValidateBeforeCall(UUID id, AccessRequestDTO accessRequestDTO,
			final ApiCallback _callback) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling createAccessRequestToProject(Async)");
		}

		// verify the required parameter 'accessRequestDTO' is set
		if (accessRequestDTO == null) {
			throw new ApiException(
					"Missing the required parameter 'accessRequestDTO' when calling createAccessRequestToProject(Async)");
		}

		return createAccessRequestToProjectCall(id, accessRequestDTO, _callback);

	}

	/**
	 * Request user access to project
	 * @param id (required)
	 * @param accessRequestDTO (required)
	 * @return AccessResponseDTO
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public AccessResponseDTO createAccessRequestToProject(UUID id, AccessRequestDTO accessRequestDTO)
			throws ApiException {
		ApiResponse<AccessResponseDTO> localVarResp = createAccessRequestToProjectWithHttpInfo(id, accessRequestDTO);
		return localVarResp.getData();
	}

	/**
	 * Request user access to project
	 * @param id (required)
	 * @param accessRequestDTO (required)
	 * @return ApiResponse&lt;AccessResponseDTO&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<AccessResponseDTO> createAccessRequestToProjectWithHttpInfo(UUID id,
			AccessRequestDTO accessRequestDTO) throws ApiException {
		okhttp3.Call localVarCall = createAccessRequestToProjectValidateBeforeCall(id, accessRequestDTO, null);
		Type localVarReturnType = new TypeToken<AccessResponseDTO>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Request user access to project (asynchronously)
	 * @param id (required)
	 * @param accessRequestDTO (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call createAccessRequestToProjectAsync(UUID id, AccessRequestDTO accessRequestDTO,
			final ApiCallback<AccessResponseDTO> _callback) throws ApiException {

		okhttp3.Call localVarCall = createAccessRequestToProjectValidateBeforeCall(id, accessRequestDTO, _callback);
		Type localVarReturnType = new TypeToken<AccessResponseDTO>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for createProject
	 * @param projectRequestDTO (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>201</td>
	 * <td>Created</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call createProjectCall(ProjectRequestDTO projectRequestDTO, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = projectRequestDTO;

		// create path and map variables
		String localVarPath = "/api/v1/projects";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json", "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call createProjectValidateBeforeCall(ProjectRequestDTO projectRequestDTO,
			final ApiCallback _callback) throws ApiException {
		// verify the required parameter 'projectRequestDTO' is set
		if (projectRequestDTO == null) {
			throw new ApiException(
					"Missing the required parameter 'projectRequestDTO' when calling createProject(Async)");
		}

		return createProjectCall(projectRequestDTO, _callback);

	}

	/**
	 * Creates a new project
	 * @param projectRequestDTO (required)
	 * @return ProjectResponseDTO
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>201</td>
	 * <td>Created</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ProjectResponseDTO createProject(ProjectRequestDTO projectRequestDTO) throws ApiException {
		ApiResponse<ProjectResponseDTO> localVarResp = createProjectWithHttpInfo(projectRequestDTO);
		return localVarResp.getData();
	}

	/**
	 * Creates a new project
	 * @param projectRequestDTO (required)
	 * @return ApiResponse&lt;ProjectResponseDTO&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>201</td>
	 * <td>Created</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<ProjectResponseDTO> createProjectWithHttpInfo(ProjectRequestDTO projectRequestDTO)
			throws ApiException {
		okhttp3.Call localVarCall = createProjectValidateBeforeCall(projectRequestDTO, null);
		Type localVarReturnType = new TypeToken<ProjectResponseDTO>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Creates a new project (asynchronously)
	 * @param projectRequestDTO (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>201</td>
	 * <td>Created</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call createProjectAsync(ProjectRequestDTO projectRequestDTO,
			final ApiCallback<ProjectResponseDTO> _callback) throws ApiException {

		okhttp3.Call localVarCall = createProjectValidateBeforeCall(projectRequestDTO, _callback);
		Type localVarReturnType = new TypeToken<ProjectResponseDTO>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getProjectById
	 * @param id (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>304</td>
	 * <td>Not Modified</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call getProjectByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v1/projects/{id}".replace("{" + "id" + "}",
				localVarApiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json", "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getProjectByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling getProjectById(Async)");
		}

		return getProjectByIdCall(id, _callback);

	}

	/**
	 * Returns information about a specified project
	 * @param id (required)
	 * @return ProjectResponseDTO
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>304</td>
	 * <td>Not Modified</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ProjectResponseDTO getProjectById(UUID id) throws ApiException {
		ApiResponse<ProjectResponseDTO> localVarResp = getProjectByIdWithHttpInfo(id);
		return localVarResp.getData();
	}

	/**
	 * Returns information about a specified project
	 * @param id (required)
	 * @return ApiResponse&lt;ProjectResponseDTO&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>304</td>
	 * <td>Not Modified</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<ProjectResponseDTO> getProjectByIdWithHttpInfo(UUID id) throws ApiException {
		okhttp3.Call localVarCall = getProjectByIdValidateBeforeCall(id, null);
		Type localVarReturnType = new TypeToken<ProjectResponseDTO>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Returns information about a specified project (asynchronously)
	 * @param id (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>304</td>
	 * <td>Not Modified</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call getProjectByIdAsync(UUID id, final ApiCallback<ProjectResponseDTO> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getProjectByIdValidateBeforeCall(id, _callback);
		Type localVarReturnType = new TypeToken<ProjectResponseDTO>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getProjects
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>304</td>
	 * <td>Not Modified</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call getProjectsCall(final ApiCallback _callback) throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v1/projects";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json", "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getProjectsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
		return getProjectsCall(_callback);

	}

	/**
	 * Returns a list of project
	 * @return List&lt;ProjectResponseDTO&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>304</td>
	 * <td>Not Modified</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public List<ProjectResponseDTO> getProjects() throws ApiException {
		ApiResponse<List<ProjectResponseDTO>> localVarResp = getProjectsWithHttpInfo();
		return localVarResp.getData();
	}

	/**
	 * Returns a list of project
	 * @return ApiResponse&lt;List&lt;ProjectResponseDTO&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>304</td>
	 * <td>Not Modified</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<List<ProjectResponseDTO>> getProjectsWithHttpInfo() throws ApiException {
		okhttp3.Call localVarCall = getProjectsValidateBeforeCall(null);
		Type localVarReturnType = new TypeToken<List<ProjectResponseDTO>>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Returns a list of project (asynchronously)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>304</td>
	 * <td>Not Modified</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call getProjectsAsync(final ApiCallback<List<ProjectResponseDTO>> _callback) throws ApiException {

		okhttp3.Call localVarCall = getProjectsValidateBeforeCall(_callback);
		Type localVarReturnType = new TypeToken<List<ProjectResponseDTO>>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for removeUsersFromProject
	 * @param id (required)
	 * @param requestBody (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call removeUsersFromProjectCall(UUID id, List<String> requestBody, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = requestBody;

		// create path and map variables
		String localVarPath = "/api/v1/projects/{id}/users".replace("{" + "id" + "}",
				localVarApiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json", "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call removeUsersFromProjectValidateBeforeCall(UUID id, List<String> requestBody,
			final ApiCallback _callback) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling removeUsersFromProject(Async)");
		}

		// verify the required parameter 'requestBody' is set
		if (requestBody == null) {
			throw new ApiException(
					"Missing the required parameter 'requestBody' when calling removeUsersFromProject(Async)");
		}

		return removeUsersFromProjectCall(id, requestBody, _callback);

	}

	/**
	 * Remove users from project
	 * @param id (required)
	 * @param requestBody (required)
	 * @return ProjectUserRoleResponseDTO
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ProjectUserRoleResponseDTO removeUsersFromProject(UUID id, List<String> requestBody) throws ApiException {
		ApiResponse<ProjectUserRoleResponseDTO> localVarResp = removeUsersFromProjectWithHttpInfo(id, requestBody);
		return localVarResp.getData();
	}

	/**
	 * Remove users from project
	 * @param id (required)
	 * @param requestBody (required)
	 * @return ApiResponse&lt;ProjectUserRoleResponseDTO&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<ProjectUserRoleResponseDTO> removeUsersFromProjectWithHttpInfo(UUID id, List<String> requestBody)
			throws ApiException {
		okhttp3.Call localVarCall = removeUsersFromProjectValidateBeforeCall(id, requestBody, null);
		Type localVarReturnType = new TypeToken<ProjectUserRoleResponseDTO>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Remove users from project (asynchronously)
	 * @param id (required)
	 * @param requestBody (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call removeUsersFromProjectAsync(UUID id, List<String> requestBody,
			final ApiCallback<ProjectUserRoleResponseDTO> _callback) throws ApiException {

		okhttp3.Call localVarCall = removeUsersFromProjectValidateBeforeCall(id, requestBody, _callback);
		Type localVarReturnType = new TypeToken<ProjectUserRoleResponseDTO>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateUserRolesToProject
	 * @param id (required)
	 * @param userRoleRequestDTO (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call updateUserRolesToProjectCall(UUID id, List<UserRoleRequestDTO> userRoleRequestDTO,
			final ApiCallback _callback) throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = userRoleRequestDTO;

		// create path and map variables
		String localVarPath = "/api/v1/projects/{id}/users".replace("{" + "id" + "}",
				localVarApiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json", "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateUserRolesToProjectValidateBeforeCall(UUID id,
			List<UserRoleRequestDTO> userRoleRequestDTO, final ApiCallback _callback) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling updateUserRolesToProject(Async)");
		}

		// verify the required parameter 'userRoleRequestDTO' is set
		if (userRoleRequestDTO == null) {
			throw new ApiException(
					"Missing the required parameter 'userRoleRequestDTO' when calling updateUserRolesToProject(Async)");
		}

		return updateUserRolesToProjectCall(id, userRoleRequestDTO, _callback);

	}

	/**
	 * Update user roles in project
	 * @param id (required)
	 * @param userRoleRequestDTO (required)
	 * @return ProjectUserRoleResponseDTO
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ProjectUserRoleResponseDTO updateUserRolesToProject(UUID id, List<UserRoleRequestDTO> userRoleRequestDTO)
			throws ApiException {
		ApiResponse<ProjectUserRoleResponseDTO> localVarResp = updateUserRolesToProjectWithHttpInfo(id,
				userRoleRequestDTO);
		return localVarResp.getData();
	}

	/**
	 * Update user roles in project
	 * @param id (required)
	 * @param userRoleRequestDTO (required)
	 * @return ApiResponse&lt;ProjectUserRoleResponseDTO&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<ProjectUserRoleResponseDTO> updateUserRolesToProjectWithHttpInfo(UUID id,
			List<UserRoleRequestDTO> userRoleRequestDTO) throws ApiException {
		okhttp3.Call localVarCall = updateUserRolesToProjectValidateBeforeCall(id, userRoleRequestDTO, null);
		Type localVarReturnType = new TypeToken<ProjectUserRoleResponseDTO>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Update user roles in project (asynchronously)
	 * @param id (required)
	 * @param userRoleRequestDTO (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call updateUserRolesToProjectAsync(UUID id, List<UserRoleRequestDTO> userRoleRequestDTO,
			final ApiCallback<ProjectUserRoleResponseDTO> _callback) throws ApiException {

		okhttp3.Call localVarCall = updateUserRolesToProjectValidateBeforeCall(id, userRoleRequestDTO, _callback);
		Type localVarReturnType = new TypeToken<ProjectUserRoleResponseDTO>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

}
