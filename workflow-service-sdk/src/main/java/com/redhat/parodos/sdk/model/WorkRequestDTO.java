/*
 * Parodos Workflow Service API
 * This is the API documentation for the Parodos Workflow Service. It provides operations to execute assessments to determine infrastructure options (tooling + environments). Also executes infrastructure task workflows to call downstream systems to stand-up an infrastructure option.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.redhat.parodos.sdk.model.ArgumentRequestDTO;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * WorkRequestDTO
 */
@lombok.Data
@lombok.AllArgsConstructor
@lombok.Builder
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WorkRequestDTO {

	public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";

	@SerializedName(SERIALIZED_NAME_ARGUMENTS)
	private List<ArgumentRequestDTO> arguments = null;

	public static final String SERIALIZED_NAME_TYPE = "type";

	@SerializedName(SERIALIZED_NAME_TYPE)
	private String type;

	public static final String SERIALIZED_NAME_WORK_NAME = "workName";

	@SerializedName(SERIALIZED_NAME_WORK_NAME)
	private String workName;

	public WorkRequestDTO() {
	}

	public WorkRequestDTO arguments(List<ArgumentRequestDTO> arguments) {

		this.arguments = arguments;
		return this;
	}

	public WorkRequestDTO addArgumentsItem(ArgumentRequestDTO argumentsItem) {
		if (this.arguments == null) {
			this.arguments = new ArrayList<ArgumentRequestDTO>();
		}
		this.arguments.add(argumentsItem);
		return this;
	}

	/**
	 * Get arguments
	 * @return arguments
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "")

	public List<ArgumentRequestDTO> getArguments() {
		return arguments;
	}

	public void setArguments(List<ArgumentRequestDTO> arguments) {
		this.arguments = arguments;
	}

	public WorkRequestDTO type(String type) {

		this.type = type;
		return this;
	}

	/**
	 * Get type
	 * @return type
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "")

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public WorkRequestDTO workName(String workName) {

		this.workName = workName;
		return this;
	}

	/**
	 * Get workName
	 * @return workName
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "")

	public String getWorkName() {
		return workName;
	}

	public void setWorkName(String workName) {
		this.workName = workName;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		WorkRequestDTO workRequestDTO = (WorkRequestDTO) o;
		return Objects.equals(this.arguments, workRequestDTO.arguments)
				&& Objects.equals(this.type, workRequestDTO.type)
				&& Objects.equals(this.workName, workRequestDTO.workName);
	}

	@Override
	public int hashCode() {
		return Objects.hash(arguments, type, workName);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class WorkRequestDTO {\n");
		sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    workName: ").append(toIndentedString(workName)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the
	 * first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
