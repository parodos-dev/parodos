/*
 * Parodos Workflow Service API
 * This is the API documentation for the Parodos Workflow Service. It provides operations to execute assessments to determine infrastructure options (tooling + environments). Also executes infrastructure task workflows to call downstream systems to stand-up an infrastructure option.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.sdk.api;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.gson.reflect.TypeToken;
import com.redhat.parodos.sdk.invoker.ApiCallback;
import com.redhat.parodos.sdk.invoker.ApiClient;
import com.redhat.parodos.sdk.invoker.ApiException;
import com.redhat.parodos.sdk.invoker.ApiResponse;
import com.redhat.parodos.sdk.invoker.Configuration;
import com.redhat.parodos.sdk.invoker.Pair;
import com.redhat.parodos.sdk.model.WorkFlowDefinitionResponseDTO;
import com.redhat.parodos.sdk.model.WorkParameterValueRequestDTO;
import com.redhat.parodos.sdk.model.WorkParameterValueResponseDTO;

public class WorkflowDefinitionApi {

	private ApiClient localVarApiClient;

	private int localHostIndex;

	private String localCustomBaseUrl;

	public WorkflowDefinitionApi() {
		this(Configuration.getDefaultApiClient());
	}

	public WorkflowDefinitionApi(ApiClient apiClient) {
		this.localVarApiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return localVarApiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.localVarApiClient = apiClient;
	}

	public int getHostIndex() {
		return localHostIndex;
	}

	public void setHostIndex(int hostIndex) {
		this.localHostIndex = hostIndex;
	}

	public String getCustomBaseUrl() {
		return localCustomBaseUrl;
	}

	public void setCustomBaseUrl(String customBaseUrl) {
		this.localCustomBaseUrl = customBaseUrl;
	}

	/**
	 * Build call for getWorkFlowDefinitionById
	 * @param id (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call getWorkFlowDefinitionByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v1/workflowdefinitions/{id}".replace("{" + "id" + "}",
				localVarApiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json", "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getWorkFlowDefinitionByIdValidateBeforeCall(UUID id, final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling getWorkFlowDefinitionById(Async)");
		}

		return getWorkFlowDefinitionByIdCall(id, _callback);

	}

	/**
	 * Returns information about a workflow definition by id
	 * @param id (required)
	 * @return WorkFlowDefinitionResponseDTO
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public WorkFlowDefinitionResponseDTO getWorkFlowDefinitionById(UUID id) throws ApiException {
		ApiResponse<WorkFlowDefinitionResponseDTO> localVarResp = getWorkFlowDefinitionByIdWithHttpInfo(id);
		return localVarResp.getData();
	}

	/**
	 * Returns information about a workflow definition by id
	 * @param id (required)
	 * @return ApiResponse&lt;WorkFlowDefinitionResponseDTO&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<WorkFlowDefinitionResponseDTO> getWorkFlowDefinitionByIdWithHttpInfo(UUID id)
			throws ApiException {
		okhttp3.Call localVarCall = getWorkFlowDefinitionByIdValidateBeforeCall(id, null);
		Type localVarReturnType = new TypeToken<WorkFlowDefinitionResponseDTO>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Returns information about a workflow definition by id (asynchronously)
	 * @param id (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call getWorkFlowDefinitionByIdAsync(UUID id,
			final ApiCallback<WorkFlowDefinitionResponseDTO> _callback) throws ApiException {

		okhttp3.Call localVarCall = getWorkFlowDefinitionByIdValidateBeforeCall(id, _callback);
		Type localVarReturnType = new TypeToken<WorkFlowDefinitionResponseDTO>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getWorkFlowDefinitions
	 * @param name (optional)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call getWorkFlowDefinitionsCall(String name, final ApiCallback _callback) throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v1/workflowdefinitions";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (name != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
		}

		final String[] localVarAccepts = { "application/json", "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getWorkFlowDefinitionsValidateBeforeCall(String name, final ApiCallback _callback)
			throws ApiException {
		return getWorkFlowDefinitionsCall(name, _callback);

	}

	/**
	 * Returns a list of workflow definition
	 * @param name (optional)
	 * @return List&lt;WorkFlowDefinitionResponseDTO&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public List<WorkFlowDefinitionResponseDTO> getWorkFlowDefinitions(String name) throws ApiException {
		ApiResponse<List<WorkFlowDefinitionResponseDTO>> localVarResp = getWorkFlowDefinitionsWithHttpInfo(name);
		return localVarResp.getData();
	}

	/**
	 * Returns a list of workflow definition
	 * @param name (optional)
	 * @return ApiResponse&lt;List&lt;WorkFlowDefinitionResponseDTO&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<List<WorkFlowDefinitionResponseDTO>> getWorkFlowDefinitionsWithHttpInfo(String name)
			throws ApiException {
		okhttp3.Call localVarCall = getWorkFlowDefinitionsValidateBeforeCall(name, null);
		Type localVarReturnType = new TypeToken<List<WorkFlowDefinitionResponseDTO>>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Returns a list of workflow definition (asynchronously)
	 * @param name (optional)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call getWorkFlowDefinitionsAsync(String name,
			final ApiCallback<List<WorkFlowDefinitionResponseDTO>> _callback) throws ApiException {

		okhttp3.Call localVarCall = getWorkFlowDefinitionsValidateBeforeCall(name, _callback);
		Type localVarReturnType = new TypeToken<List<WorkFlowDefinitionResponseDTO>>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for updateParameter
	 * @param workflowDefinitionName workflow Definition Name (required)
	 * @param valueProviderName valueProvider Name. It can be referenced to
	 * &#39;valueProviderName&#39; in [GET
	 * /getWorkFlowDefinitions](#/Workflow%20Definition/getWorkFlowDefinitions) (required)
	 * @param workParameterValueRequestDTO (required)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call updateParameterCall(String workflowDefinitionName, String valueProviderName,
			List<WorkParameterValueRequestDTO> workParameterValueRequestDTO, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		}
		else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		}
		else {
			basePath = null;
		}

		Object localVarPostBody = workParameterValueRequestDTO;

		// create path and map variables
		String localVarPath = "/api/v1/workflowdefinitions/{workflowDefinitionName}/parameters/update/{valueProviderName}"
				.replace("{" + "workflowDefinitionName" + "}",
						localVarApiClient.escapeString(workflowDefinitionName.toString()))
				.replace("{" + "valueProviderName" + "}", localVarApiClient.escapeString(valueProviderName.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json", "*/*" };
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] {};
		return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
				localVarFormParams, localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call updateParameterValidateBeforeCall(String workflowDefinitionName, String valueProviderName,
			List<WorkParameterValueRequestDTO> workParameterValueRequestDTO, final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'workflowDefinitionName' is set
		if (workflowDefinitionName == null) {
			throw new ApiException(
					"Missing the required parameter 'workflowDefinitionName' when calling updateParameter(Async)");
		}

		// verify the required parameter 'valueProviderName' is set
		if (valueProviderName == null) {
			throw new ApiException(
					"Missing the required parameter 'valueProviderName' when calling updateParameter(Async)");
		}

		// verify the required parameter 'workParameterValueRequestDTO' is set
		if (workParameterValueRequestDTO == null) {
			throw new ApiException(
					"Missing the required parameter 'workParameterValueRequestDTO' when calling updateParameter(Async)");
		}

		return updateParameterCall(workflowDefinitionName, valueProviderName, workParameterValueRequestDTO, _callback);

	}

	/**
	 * Returns updated parameter value
	 * @param workflowDefinitionName workflow Definition Name (required)
	 * @param valueProviderName valueProvider Name. It can be referenced to
	 * &#39;valueProviderName&#39; in [GET
	 * /getWorkFlowDefinitions](#/Workflow%20Definition/getWorkFlowDefinitions) (required)
	 * @param workParameterValueRequestDTO (required)
	 * @return List&lt;WorkParameterValueResponseDTO&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public List<WorkParameterValueResponseDTO> updateParameter(String workflowDefinitionName, String valueProviderName,
			List<WorkParameterValueRequestDTO> workParameterValueRequestDTO) throws ApiException {
		ApiResponse<List<WorkParameterValueResponseDTO>> localVarResp = updateParameterWithHttpInfo(
				workflowDefinitionName, valueProviderName, workParameterValueRequestDTO);
		return localVarResp.getData();
	}

	/**
	 * Returns updated parameter value
	 * @param workflowDefinitionName workflow Definition Name (required)
	 * @param valueProviderName valueProvider Name. It can be referenced to
	 * &#39;valueProviderName&#39; in [GET
	 * /getWorkFlowDefinitions](#/Workflow%20Definition/getWorkFlowDefinitions) (required)
	 * @param workParameterValueRequestDTO (required)
	 * @return ApiResponse&lt;List&lt;WorkParameterValueResponseDTO&gt;&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 * deserialize the response body
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public ApiResponse<List<WorkParameterValueResponseDTO>> updateParameterWithHttpInfo(String workflowDefinitionName,
			String valueProviderName, List<WorkParameterValueRequestDTO> workParameterValueRequestDTO)
			throws ApiException {
		okhttp3.Call localVarCall = updateParameterValidateBeforeCall(workflowDefinitionName, valueProviderName,
				workParameterValueRequestDTO, null);
		Type localVarReturnType = new TypeToken<List<WorkParameterValueResponseDTO>>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Returns updated parameter value (asynchronously)
	 * @param workflowDefinitionName workflow Definition Name (required)
	 * @param valueProviderName valueProvider Name. It can be referenced to
	 * &#39;valueProviderName&#39; in [GET
	 * /getWorkFlowDefinitions](#/Workflow%20Definition/getWorkFlowDefinitions) (required)
	 * @param workParameterValueRequestDTO (required)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request
	 * body object
	 * @http.response.details
	 * <table summary="Response Details" border="1">
	 * <tr>
	 * <td>Status Code</td>
	 * <td>Description</td>
	 * <td>Response Headers</td>
	 * </tr>
	 * <tr>
	 * <td>200</td>
	 * <td>Succeeded</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>400</td>
	 * <td>Bad Request</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>401</td>
	 * <td>Unauthorized</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>403</td>
	 * <td>Forbidden</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>404</td>
	 * <td>Not Found</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>409</td>
	 * <td>Conflict</td>
	 * <td>-</td>
	 * </tr>
	 * <tr>
	 * <td>500</td>
	 * <td>Internal Server Error</td>
	 * <td>-</td>
	 * </tr>
	 * </table>
	 */
	public okhttp3.Call updateParameterAsync(String workflowDefinitionName, String valueProviderName,
			List<WorkParameterValueRequestDTO> workParameterValueRequestDTO,
			final ApiCallback<List<WorkParameterValueResponseDTO>> _callback) throws ApiException {

		okhttp3.Call localVarCall = updateParameterValidateBeforeCall(workflowDefinitionName, valueProviderName,
				workParameterValueRequestDTO, _callback);
		Type localVarReturnType = new TypeToken<List<WorkParameterValueResponseDTO>>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

}
