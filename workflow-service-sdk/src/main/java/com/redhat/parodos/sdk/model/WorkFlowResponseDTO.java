/*
 * Parodos Workflow Service API
 * This is the API documentation for the Parodos Workflow Service. It provides operations to execute assessments to determine infrastructure options (tooling + environments). Also executes infrastructure task workflows to call downstream systems to stand-up an infrastructure option.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.sdk.model;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.redhat.parodos.sdk.invoker.JSON;

/**
 * WorkFlowResponseDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WorkFlowResponseDTO {

	public static final String SERIALIZED_NAME_CREATE_USER = "createUser";

	@SerializedName(SERIALIZED_NAME_CREATE_USER)
	private String createUser;

	public static final String SERIALIZED_NAME_END_DATE = "endDate";

	@SerializedName(SERIALIZED_NAME_END_DATE)
	private String endDate;

	public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";

	@SerializedName(SERIALIZED_NAME_PROJECT_ID)
	private UUID projectId;

	public static final String SERIALIZED_NAME_START_DATE = "startDate";

	@SerializedName(SERIALIZED_NAME_START_DATE)
	private String startDate;

	public static final String SERIALIZED_NAME_WORK_FLOW_EXECUTION_ID = "workFlowExecutionId";

	@SerializedName(SERIALIZED_NAME_WORK_FLOW_EXECUTION_ID)
	private UUID workFlowExecutionId;

	public static final String SERIALIZED_NAME_WORK_FLOW_NAME = "workFlowName";

	@SerializedName(SERIALIZED_NAME_WORK_FLOW_NAME)
	private String workFlowName;

	public static final String SERIALIZED_NAME_WORK_FLOW_OPTIONS = "workFlowOptions";

	@SerializedName(SERIALIZED_NAME_WORK_FLOW_OPTIONS)
	private WorkFlowOptions workFlowOptions;

	/**
	 * Gets or Sets workStatus
	 */
	@JsonAdapter(WorkStatusEnum.Adapter.class)
	public enum WorkStatusEnum {

		FAILED("FAILED"),

		COMPLETED("COMPLETED"),

		IN_PROGRESS("IN_PROGRESS"),

		REJECTED("REJECTED"),

		PENDING("PENDING");

		private String value;

		WorkStatusEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static WorkStatusEnum fromValue(String value) {
			for (WorkStatusEnum b : WorkStatusEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		public static class Adapter extends TypeAdapter<WorkStatusEnum> {

			@Override
			public void write(final JsonWriter jsonWriter, final WorkStatusEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public WorkStatusEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return WorkStatusEnum.fromValue(value);
			}

		}

	}

	public static final String SERIALIZED_NAME_WORK_STATUS = "workStatus";

	@SerializedName(SERIALIZED_NAME_WORK_STATUS)
	private WorkStatusEnum workStatus;

	public WorkFlowResponseDTO() {
	}

	public WorkFlowResponseDTO createUser(String createUser) {

		this.createUser = createUser;
		return this;
	}

	/**
	 * Get createUser
	 * @return createUser
	 **/
	@javax.annotation.Nullable

	public String getCreateUser() {
		return createUser;
	}

	public void setCreateUser(String createUser) {
		this.createUser = createUser;
	}

	public WorkFlowResponseDTO endDate(String endDate) {

		this.endDate = endDate;
		return this;
	}

	/**
	 * Get endDate
	 * @return endDate
	 **/
	@javax.annotation.Nullable

	public String getEndDate() {
		return endDate;
	}

	public void setEndDate(String endDate) {
		this.endDate = endDate;
	}

	public WorkFlowResponseDTO projectId(UUID projectId) {

		this.projectId = projectId;
		return this;
	}

	/**
	 * Get projectId
	 * @return projectId
	 **/
	@javax.annotation.Nullable

	public UUID getProjectId() {
		return projectId;
	}

	public void setProjectId(UUID projectId) {
		this.projectId = projectId;
	}

	public WorkFlowResponseDTO startDate(String startDate) {

		this.startDate = startDate;
		return this;
	}

	/**
	 * Get startDate
	 * @return startDate
	 **/
	@javax.annotation.Nullable

	public String getStartDate() {
		return startDate;
	}

	public void setStartDate(String startDate) {
		this.startDate = startDate;
	}

	public WorkFlowResponseDTO workFlowExecutionId(UUID workFlowExecutionId) {

		this.workFlowExecutionId = workFlowExecutionId;
		return this;
	}

	/**
	 * Get workFlowExecutionId
	 * @return workFlowExecutionId
	 **/
	@javax.annotation.Nullable

	public UUID getWorkFlowExecutionId() {
		return workFlowExecutionId;
	}

	public void setWorkFlowExecutionId(UUID workFlowExecutionId) {
		this.workFlowExecutionId = workFlowExecutionId;
	}

	public WorkFlowResponseDTO workFlowName(String workFlowName) {

		this.workFlowName = workFlowName;
		return this;
	}

	/**
	 * Get workFlowName
	 * @return workFlowName
	 **/
	@javax.annotation.Nullable

	public String getWorkFlowName() {
		return workFlowName;
	}

	public void setWorkFlowName(String workFlowName) {
		this.workFlowName = workFlowName;
	}

	public WorkFlowResponseDTO workFlowOptions(WorkFlowOptions workFlowOptions) {

		this.workFlowOptions = workFlowOptions;
		return this;
	}

	/**
	 * Get workFlowOptions
	 * @return workFlowOptions
	 **/
	@javax.annotation.Nullable

	public WorkFlowOptions getWorkFlowOptions() {
		return workFlowOptions;
	}

	public void setWorkFlowOptions(WorkFlowOptions workFlowOptions) {
		this.workFlowOptions = workFlowOptions;
	}

	public WorkFlowResponseDTO workStatus(WorkStatusEnum workStatus) {

		this.workStatus = workStatus;
		return this;
	}

	/**
	 * Get workStatus
	 * @return workStatus
	 **/
	@javax.annotation.Nullable

	public WorkStatusEnum getWorkStatus() {
		return workStatus;
	}

	public void setWorkStatus(WorkStatusEnum workStatus) {
		this.workStatus = workStatus;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		WorkFlowResponseDTO workFlowResponseDTO = (WorkFlowResponseDTO) o;
		return Objects.equals(this.createUser, workFlowResponseDTO.createUser)
				&& Objects.equals(this.endDate, workFlowResponseDTO.endDate)
				&& Objects.equals(this.projectId, workFlowResponseDTO.projectId)
				&& Objects.equals(this.startDate, workFlowResponseDTO.startDate)
				&& Objects.equals(this.workFlowExecutionId, workFlowResponseDTO.workFlowExecutionId)
				&& Objects.equals(this.workFlowName, workFlowResponseDTO.workFlowName)
				&& Objects.equals(this.workFlowOptions, workFlowResponseDTO.workFlowOptions)
				&& Objects.equals(this.workStatus, workFlowResponseDTO.workStatus);
	}

	@Override
	public int hashCode() {
		return Objects.hash(createUser, endDate, projectId, startDate, workFlowExecutionId, workFlowName,
				workFlowOptions, workStatus);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class WorkFlowResponseDTO {\n");
		sb.append("    createUser: ").append(toIndentedString(createUser)).append("\n");
		sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
		sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
		sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
		sb.append("    workFlowExecutionId: ").append(toIndentedString(workFlowExecutionId)).append("\n");
		sb.append("    workFlowName: ").append(toIndentedString(workFlowName)).append("\n");
		sb.append("    workFlowOptions: ").append(toIndentedString(workFlowOptions)).append("\n");
		sb.append("    workStatus: ").append(toIndentedString(workStatus)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the
	 * first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;

	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>();
		openapiFields.add("createUser");
		openapiFields.add("endDate");
		openapiFields.add("projectId");
		openapiFields.add("startDate");
		openapiFields.add("workFlowExecutionId");
		openapiFields.add("workFlowName");
		openapiFields.add("workFlowOptions");
		openapiFields.add("workStatus");

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>();
	}

	/**
	 * Validates the JSON Object and throws an exception if issues found
	 * @param jsonObj JSON Object
	 * @throws IOException if the JSON Object is invalid with respect to
	 * WorkFlowResponseDTO
	 */
	public static void validateJsonObject(JsonObject jsonObj) throws IOException {
		if (jsonObj == null) {
			if (!WorkFlowResponseDTO.openapiRequiredFields.isEmpty()) { // has required
																		// fields but JSON
																		// object is null
				throw new IllegalArgumentException(String.format(
						"The required field(s) %s in WorkFlowResponseDTO is not found in the empty JSON string",
						WorkFlowResponseDTO.openapiRequiredFields.toString()));
			}
		}

		Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
		// check to see if the JSON string contains additional fields
		for (Entry<String, JsonElement> entry : entries) {
			if (!WorkFlowResponseDTO.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(String.format(
						"The field `%s` in the JSON string is not defined in the `WorkFlowResponseDTO` properties. JSON: %s",
						entry.getKey(), jsonObj.toString()));
			}
		}
		if ((jsonObj.get("createUser") != null && !jsonObj.get("createUser").isJsonNull())
				&& !jsonObj.get("createUser").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `createUser` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("createUser").toString()));
		}
		if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull())
				&& !jsonObj.get("endDate").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("endDate").toString()));
		}
		if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull())
				&& !jsonObj.get("projectId").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `projectId` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("projectId").toString()));
		}
		if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull())
				&& !jsonObj.get("startDate").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `startDate` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("startDate").toString()));
		}
		if ((jsonObj.get("workFlowExecutionId") != null && !jsonObj.get("workFlowExecutionId").isJsonNull())
				&& !jsonObj.get("workFlowExecutionId").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `workFlowExecutionId` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("workFlowExecutionId").toString()));
		}
		if ((jsonObj.get("workFlowName") != null && !jsonObj.get("workFlowName").isJsonNull())
				&& !jsonObj.get("workFlowName").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `workFlowName` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("workFlowName").toString()));
		}
		// validate the optional field `workFlowOptions`
		if (jsonObj.get("workFlowOptions") != null && !jsonObj.get("workFlowOptions").isJsonNull()) {
			WorkFlowOptions.validateJsonObject(jsonObj.getAsJsonObject("workFlowOptions"));
		}
		if ((jsonObj.get("workStatus") != null && !jsonObj.get("workStatus").isJsonNull())
				&& !jsonObj.get("workStatus").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `workStatus` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("workStatus").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {

		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!WorkFlowResponseDTO.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'WorkFlowResponseDTO' and its
								// subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<WorkFlowResponseDTO> thisAdapter = gson.getDelegateAdapter(this,
					TypeToken.get(WorkFlowResponseDTO.class));

			return (TypeAdapter<T>) new TypeAdapter<WorkFlowResponseDTO>() {
				@Override
				public void write(JsonWriter out, WorkFlowResponseDTO value) throws IOException {
					JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
					elementAdapter.write(out, obj);
				}

				@Override
				public WorkFlowResponseDTO read(JsonReader in) throws IOException {
					JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
					validateJsonObject(jsonObj);
					return thisAdapter.fromJsonTree(jsonObj);
				}

			}.nullSafe();
		}

	}

	/**
	 * Create an instance of WorkFlowResponseDTO given an JSON string
	 * @param jsonString JSON string
	 * @return An instance of WorkFlowResponseDTO
	 * @throws IOException if the JSON string is invalid with respect to
	 * WorkFlowResponseDTO
	 */
	public static WorkFlowResponseDTO fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, WorkFlowResponseDTO.class);
	}

	/**
	 * Convert an instance of WorkFlowResponseDTO to an JSON string
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}

}
