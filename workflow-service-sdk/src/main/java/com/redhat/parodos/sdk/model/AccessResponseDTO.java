/*
 * Parodos Workflow Service API
 * This is the API documentation for the Parodos Workflow Service. It provides operations to execute assessments to determine infrastructure options (tooling + environments). Also executes infrastructure task workflows to call downstream systems to stand-up an infrastructure option.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.sdk.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.redhat.parodos.sdk.invoker.JSON;

/**
 * AccessResponseDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AccessResponseDTO {

	public static final String SERIALIZED_NAME_ACCESS_REQUEST_ID = "accessRequestId";

	@SerializedName(SERIALIZED_NAME_ACCESS_REQUEST_ID)
	private UUID accessRequestId;

	public static final String SERIALIZED_NAME_APPROVAL_SENT_TO = "approvalSentTo";

	@SerializedName(SERIALIZED_NAME_APPROVAL_SENT_TO)
	private List<String> approvalSentTo = new ArrayList<>();

	public static final String SERIALIZED_NAME_ESCALATION_SENT_TO = "escalationSentTo";

	@SerializedName(SERIALIZED_NAME_ESCALATION_SENT_TO)
	private String escalationSentTo;

	public static final String SERIALIZED_NAME_PROJECT = "project";

	@SerializedName(SERIALIZED_NAME_PROJECT)
	private ProjectDTO project;

	public AccessResponseDTO() {
	}

	public AccessResponseDTO accessRequestId(UUID accessRequestId) {

		this.accessRequestId = accessRequestId;
		return this;
	}

	/**
	 * Get accessRequestId
	 * @return accessRequestId
	 **/
	@javax.annotation.Nullable

	public UUID getAccessRequestId() {
		return accessRequestId;
	}

	public void setAccessRequestId(UUID accessRequestId) {
		this.accessRequestId = accessRequestId;
	}

	public AccessResponseDTO approvalSentTo(List<String> approvalSentTo) {

		this.approvalSentTo = approvalSentTo;
		return this;
	}

	public AccessResponseDTO addApprovalSentToItem(String approvalSentToItem) {
		if (this.approvalSentTo == null) {
			this.approvalSentTo = new ArrayList<>();
		}
		this.approvalSentTo.add(approvalSentToItem);
		return this;
	}

	/**
	 * Get approvalSentTo
	 * @return approvalSentTo
	 **/
	@javax.annotation.Nullable

	public List<String> getApprovalSentTo() {
		return approvalSentTo;
	}

	public void setApprovalSentTo(List<String> approvalSentTo) {
		this.approvalSentTo = approvalSentTo;
	}

	public AccessResponseDTO escalationSentTo(String escalationSentTo) {

		this.escalationSentTo = escalationSentTo;
		return this;
	}

	/**
	 * Get escalationSentTo
	 * @return escalationSentTo
	 **/
	@javax.annotation.Nullable

	public String getEscalationSentTo() {
		return escalationSentTo;
	}

	public void setEscalationSentTo(String escalationSentTo) {
		this.escalationSentTo = escalationSentTo;
	}

	public AccessResponseDTO project(ProjectDTO project) {

		this.project = project;
		return this;
	}

	/**
	 * Get project
	 * @return project
	 **/
	@javax.annotation.Nullable

	public ProjectDTO getProject() {
		return project;
	}

	public void setProject(ProjectDTO project) {
		this.project = project;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		AccessResponseDTO accessResponseDTO = (AccessResponseDTO) o;
		return Objects.equals(this.accessRequestId, accessResponseDTO.accessRequestId)
				&& Objects.equals(this.approvalSentTo, accessResponseDTO.approvalSentTo)
				&& Objects.equals(this.escalationSentTo, accessResponseDTO.escalationSentTo)
				&& Objects.equals(this.project, accessResponseDTO.project);
	}

	@Override
	public int hashCode() {
		return Objects.hash(accessRequestId, approvalSentTo, escalationSentTo, project);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class AccessResponseDTO {\n");
		sb.append("    accessRequestId: ").append(toIndentedString(accessRequestId)).append("\n");
		sb.append("    approvalSentTo: ").append(toIndentedString(approvalSentTo)).append("\n");
		sb.append("    escalationSentTo: ").append(toIndentedString(escalationSentTo)).append("\n");
		sb.append("    project: ").append(toIndentedString(project)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the
	 * first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;

	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>();
		openapiFields.add("accessRequestId");
		openapiFields.add("approvalSentTo");
		openapiFields.add("escalationSentTo");
		openapiFields.add("project");

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>();
	}

	/**
	 * Validates the JSON Object and throws an exception if issues found
	 * @param jsonObj JSON Object
	 * @throws IOException if the JSON Object is invalid with respect to AccessResponseDTO
	 */
	public static void validateJsonObject(JsonObject jsonObj) throws IOException {
		if (jsonObj == null) {
			if (!AccessResponseDTO.openapiRequiredFields.isEmpty()) { // has required
																		// fields but JSON
																		// object is null
				throw new IllegalArgumentException(String.format(
						"The required field(s) %s in AccessResponseDTO is not found in the empty JSON string",
						AccessResponseDTO.openapiRequiredFields.toString()));
			}
		}

		Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
		// check to see if the JSON string contains additional fields
		for (Entry<String, JsonElement> entry : entries) {
			if (!AccessResponseDTO.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(String.format(
						"The field `%s` in the JSON string is not defined in the `AccessResponseDTO` properties. JSON: %s",
						entry.getKey(), jsonObj.toString()));
			}
		}
		if ((jsonObj.get("accessRequestId") != null && !jsonObj.get("accessRequestId").isJsonNull())
				&& !jsonObj.get("accessRequestId").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `accessRequestId` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("accessRequestId").toString()));
		}
		// ensure the optional json data is an array if present
		if (jsonObj.get("approvalSentTo") != null && !jsonObj.get("approvalSentTo").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `approvalSentTo` to be an array in the JSON string but got `%s`",
							jsonObj.get("approvalSentTo").toString()));
		}
		if ((jsonObj.get("escalationSentTo") != null && !jsonObj.get("escalationSentTo").isJsonNull())
				&& !jsonObj.get("escalationSentTo").isJsonPrimitive()) {
			throw new IllegalArgumentException(String.format(
					"Expected the field `escalationSentTo` to be a primitive type in the JSON string but got `%s`",
					jsonObj.get("escalationSentTo").toString()));
		}
		// validate the optional field `project`
		if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
			ProjectDTO.validateJsonObject(jsonObj.getAsJsonObject("project"));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {

		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!AccessResponseDTO.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'AccessResponseDTO' and its
								// subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<AccessResponseDTO> thisAdapter = gson.getDelegateAdapter(this,
					TypeToken.get(AccessResponseDTO.class));

			return (TypeAdapter<T>) new TypeAdapter<AccessResponseDTO>() {
				@Override
				public void write(JsonWriter out, AccessResponseDTO value) throws IOException {
					JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
					elementAdapter.write(out, obj);
				}

				@Override
				public AccessResponseDTO read(JsonReader in) throws IOException {
					JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
					validateJsonObject(jsonObj);
					return thisAdapter.fromJsonTree(jsonObj);
				}

			}.nullSafe();
		}

	}

	/**
	 * Create an instance of AccessResponseDTO given an JSON string
	 * @param jsonString JSON string
	 * @return An instance of AccessResponseDTO
	 * @throws IOException if the JSON string is invalid with respect to AccessResponseDTO
	 */
	public static AccessResponseDTO fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, AccessResponseDTO.class);
	}

	/**
	 * Convert an instance of AccessResponseDTO to an JSON string
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}

}
