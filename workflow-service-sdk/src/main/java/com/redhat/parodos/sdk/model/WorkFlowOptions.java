/*
 * Parodos Workflow Service API
 * This is the API documentation for the Parodos Workflow Service. It provides operations to execute assessments to determine infrastructure options (tooling + environments). Also executes infrastructure task workflows to call downstream systems to stand-up an infrastructure option.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.sdk.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.redhat.parodos.sdk.invoker.JSON;

/**
 * WorkFlowOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WorkFlowOptions {

	public static final String SERIALIZED_NAME_CONTINUATION_OPTIONS = "continuationOptions";

	@SerializedName(SERIALIZED_NAME_CONTINUATION_OPTIONS)
	private List<WorkFlowOption> continuationOptions = new ArrayList<>();

	public static final String SERIALIZED_NAME_CURRENT_VERSION = "currentVersion";

	@SerializedName(SERIALIZED_NAME_CURRENT_VERSION)
	private WorkFlowOption currentVersion;

	public static final String SERIALIZED_NAME_MIGRATION_OPTIONS = "migrationOptions";

	@SerializedName(SERIALIZED_NAME_MIGRATION_OPTIONS)
	private List<WorkFlowOption> migrationOptions = new ArrayList<>();

	public static final String SERIALIZED_NAME_NEW_OPTIONS = "newOptions";

	@SerializedName(SERIALIZED_NAME_NEW_OPTIONS)
	private List<WorkFlowOption> newOptions = new ArrayList<>();

	public static final String SERIALIZED_NAME_OPTIONS_AVAILABLE = "optionsAvailable";

	@SerializedName(SERIALIZED_NAME_OPTIONS_AVAILABLE)
	private Boolean optionsAvailable;

	public static final String SERIALIZED_NAME_OTHER_OPTIONS = "otherOptions";

	@SerializedName(SERIALIZED_NAME_OTHER_OPTIONS)
	private List<WorkFlowOption> otherOptions = new ArrayList<>();

	public static final String SERIALIZED_NAME_UPGRADE_OPTIONS = "upgradeOptions";

	@SerializedName(SERIALIZED_NAME_UPGRADE_OPTIONS)
	private List<WorkFlowOption> upgradeOptions = new ArrayList<>();

	public WorkFlowOptions() {
	}

	public WorkFlowOptions continuationOptions(List<WorkFlowOption> continuationOptions) {

		this.continuationOptions = continuationOptions;
		return this;
	}

	public WorkFlowOptions addContinuationOptionsItem(WorkFlowOption continuationOptionsItem) {
		if (this.continuationOptions == null) {
			this.continuationOptions = new ArrayList<>();
		}
		this.continuationOptions.add(continuationOptionsItem);
		return this;
	}

	/**
	 * Get continuationOptions
	 * @return continuationOptions
	 **/
	@javax.annotation.Nullable

	public List<WorkFlowOption> getContinuationOptions() {
		return continuationOptions;
	}

	public void setContinuationOptions(List<WorkFlowOption> continuationOptions) {
		this.continuationOptions = continuationOptions;
	}

	public WorkFlowOptions currentVersion(WorkFlowOption currentVersion) {

		this.currentVersion = currentVersion;
		return this;
	}

	/**
	 * Get currentVersion
	 * @return currentVersion
	 **/
	@javax.annotation.Nullable

	public WorkFlowOption getCurrentVersion() {
		return currentVersion;
	}

	public void setCurrentVersion(WorkFlowOption currentVersion) {
		this.currentVersion = currentVersion;
	}

	public WorkFlowOptions migrationOptions(List<WorkFlowOption> migrationOptions) {

		this.migrationOptions = migrationOptions;
		return this;
	}

	public WorkFlowOptions addMigrationOptionsItem(WorkFlowOption migrationOptionsItem) {
		if (this.migrationOptions == null) {
			this.migrationOptions = new ArrayList<>();
		}
		this.migrationOptions.add(migrationOptionsItem);
		return this;
	}

	/**
	 * Get migrationOptions
	 * @return migrationOptions
	 **/
	@javax.annotation.Nullable

	public List<WorkFlowOption> getMigrationOptions() {
		return migrationOptions;
	}

	public void setMigrationOptions(List<WorkFlowOption> migrationOptions) {
		this.migrationOptions = migrationOptions;
	}

	public WorkFlowOptions newOptions(List<WorkFlowOption> newOptions) {

		this.newOptions = newOptions;
		return this;
	}

	public WorkFlowOptions addNewOptionsItem(WorkFlowOption newOptionsItem) {
		if (this.newOptions == null) {
			this.newOptions = new ArrayList<>();
		}
		this.newOptions.add(newOptionsItem);
		return this;
	}

	/**
	 * Get newOptions
	 * @return newOptions
	 **/
	@javax.annotation.Nullable

	public List<WorkFlowOption> getNewOptions() {
		return newOptions;
	}

	public void setNewOptions(List<WorkFlowOption> newOptions) {
		this.newOptions = newOptions;
	}

	public WorkFlowOptions optionsAvailable(Boolean optionsAvailable) {

		this.optionsAvailable = optionsAvailable;
		return this;
	}

	/**
	 * Get optionsAvailable
	 * @return optionsAvailable
	 **/
	@javax.annotation.Nullable

	public Boolean getOptionsAvailable() {
		return optionsAvailable;
	}

	public void setOptionsAvailable(Boolean optionsAvailable) {
		this.optionsAvailable = optionsAvailable;
	}

	public WorkFlowOptions otherOptions(List<WorkFlowOption> otherOptions) {

		this.otherOptions = otherOptions;
		return this;
	}

	public WorkFlowOptions addOtherOptionsItem(WorkFlowOption otherOptionsItem) {
		if (this.otherOptions == null) {
			this.otherOptions = new ArrayList<>();
		}
		this.otherOptions.add(otherOptionsItem);
		return this;
	}

	/**
	 * Get otherOptions
	 * @return otherOptions
	 **/
	@javax.annotation.Nullable

	public List<WorkFlowOption> getOtherOptions() {
		return otherOptions;
	}

	public void setOtherOptions(List<WorkFlowOption> otherOptions) {
		this.otherOptions = otherOptions;
	}

	public WorkFlowOptions upgradeOptions(List<WorkFlowOption> upgradeOptions) {

		this.upgradeOptions = upgradeOptions;
		return this;
	}

	public WorkFlowOptions addUpgradeOptionsItem(WorkFlowOption upgradeOptionsItem) {
		if (this.upgradeOptions == null) {
			this.upgradeOptions = new ArrayList<>();
		}
		this.upgradeOptions.add(upgradeOptionsItem);
		return this;
	}

	/**
	 * Get upgradeOptions
	 * @return upgradeOptions
	 **/
	@javax.annotation.Nullable

	public List<WorkFlowOption> getUpgradeOptions() {
		return upgradeOptions;
	}

	public void setUpgradeOptions(List<WorkFlowOption> upgradeOptions) {
		this.upgradeOptions = upgradeOptions;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		WorkFlowOptions workFlowOptions = (WorkFlowOptions) o;
		return Objects.equals(this.continuationOptions, workFlowOptions.continuationOptions)
				&& Objects.equals(this.currentVersion, workFlowOptions.currentVersion)
				&& Objects.equals(this.migrationOptions, workFlowOptions.migrationOptions)
				&& Objects.equals(this.newOptions, workFlowOptions.newOptions)
				&& Objects.equals(this.optionsAvailable, workFlowOptions.optionsAvailable)
				&& Objects.equals(this.otherOptions, workFlowOptions.otherOptions)
				&& Objects.equals(this.upgradeOptions, workFlowOptions.upgradeOptions);
	}

	@Override
	public int hashCode() {
		return Objects.hash(continuationOptions, currentVersion, migrationOptions, newOptions, optionsAvailable,
				otherOptions, upgradeOptions);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class WorkFlowOptions {\n");
		sb.append("    continuationOptions: ").append(toIndentedString(continuationOptions)).append("\n");
		sb.append("    currentVersion: ").append(toIndentedString(currentVersion)).append("\n");
		sb.append("    migrationOptions: ").append(toIndentedString(migrationOptions)).append("\n");
		sb.append("    newOptions: ").append(toIndentedString(newOptions)).append("\n");
		sb.append("    optionsAvailable: ").append(toIndentedString(optionsAvailable)).append("\n");
		sb.append("    otherOptions: ").append(toIndentedString(otherOptions)).append("\n");
		sb.append("    upgradeOptions: ").append(toIndentedString(upgradeOptions)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the
	 * first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;

	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>();
		openapiFields.add("continuationOptions");
		openapiFields.add("currentVersion");
		openapiFields.add("migrationOptions");
		openapiFields.add("newOptions");
		openapiFields.add("optionsAvailable");
		openapiFields.add("otherOptions");
		openapiFields.add("upgradeOptions");

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>();
	}

	/**
	 * Validates the JSON Object and throws an exception if issues found
	 * @param jsonObj JSON Object
	 * @throws IOException if the JSON Object is invalid with respect to WorkFlowOptions
	 */
	public static void validateJsonObject(JsonObject jsonObj) throws IOException {
		if (jsonObj == null) {
			if (!WorkFlowOptions.openapiRequiredFields.isEmpty()) { // has required fields
																	// but JSON object is
																	// null
				throw new IllegalArgumentException(String.format(
						"The required field(s) %s in WorkFlowOptions is not found in the empty JSON string",
						WorkFlowOptions.openapiRequiredFields.toString()));
			}
		}

		Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
		// check to see if the JSON string contains additional fields
		for (Entry<String, JsonElement> entry : entries) {
			if (!WorkFlowOptions.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(String.format(
						"The field `%s` in the JSON string is not defined in the `WorkFlowOptions` properties. JSON: %s",
						entry.getKey(), jsonObj.toString()));
			}
		}
		if (jsonObj.get("continuationOptions") != null && !jsonObj.get("continuationOptions").isJsonNull()) {
			JsonArray jsonArraycontinuationOptions = jsonObj.getAsJsonArray("continuationOptions");
			if (jsonArraycontinuationOptions != null) {
				// ensure the json data is an array
				if (!jsonObj.get("continuationOptions").isJsonArray()) {
					throw new IllegalArgumentException(String.format(
							"Expected the field `continuationOptions` to be an array in the JSON string but got `%s`",
							jsonObj.get("continuationOptions").toString()));
				}

				// validate the optional field `continuationOptions` (array)
				for (int i = 0; i < jsonArraycontinuationOptions.size(); i++) {
					WorkFlowOption.validateJsonObject(jsonArraycontinuationOptions.get(i).getAsJsonObject());
				}
				;
			}
		}
		// validate the optional field `currentVersion`
		if (jsonObj.get("currentVersion") != null && !jsonObj.get("currentVersion").isJsonNull()) {
			WorkFlowOption.validateJsonObject(jsonObj.getAsJsonObject("currentVersion"));
		}
		if (jsonObj.get("migrationOptions") != null && !jsonObj.get("migrationOptions").isJsonNull()) {
			JsonArray jsonArraymigrationOptions = jsonObj.getAsJsonArray("migrationOptions");
			if (jsonArraymigrationOptions != null) {
				// ensure the json data is an array
				if (!jsonObj.get("migrationOptions").isJsonArray()) {
					throw new IllegalArgumentException(String.format(
							"Expected the field `migrationOptions` to be an array in the JSON string but got `%s`",
							jsonObj.get("migrationOptions").toString()));
				}

				// validate the optional field `migrationOptions` (array)
				for (int i = 0; i < jsonArraymigrationOptions.size(); i++) {
					WorkFlowOption.validateJsonObject(jsonArraymigrationOptions.get(i).getAsJsonObject());
				}
				;
			}
		}
		if (jsonObj.get("newOptions") != null && !jsonObj.get("newOptions").isJsonNull()) {
			JsonArray jsonArraynewOptions = jsonObj.getAsJsonArray("newOptions");
			if (jsonArraynewOptions != null) {
				// ensure the json data is an array
				if (!jsonObj.get("newOptions").isJsonArray()) {
					throw new IllegalArgumentException(String.format(
							"Expected the field `newOptions` to be an array in the JSON string but got `%s`",
							jsonObj.get("newOptions").toString()));
				}

				// validate the optional field `newOptions` (array)
				for (int i = 0; i < jsonArraynewOptions.size(); i++) {
					WorkFlowOption.validateJsonObject(jsonArraynewOptions.get(i).getAsJsonObject());
				}
				;
			}
		}
		if (jsonObj.get("otherOptions") != null && !jsonObj.get("otherOptions").isJsonNull()) {
			JsonArray jsonArrayotherOptions = jsonObj.getAsJsonArray("otherOptions");
			if (jsonArrayotherOptions != null) {
				// ensure the json data is an array
				if (!jsonObj.get("otherOptions").isJsonArray()) {
					throw new IllegalArgumentException(String.format(
							"Expected the field `otherOptions` to be an array in the JSON string but got `%s`",
							jsonObj.get("otherOptions").toString()));
				}

				// validate the optional field `otherOptions` (array)
				for (int i = 0; i < jsonArrayotherOptions.size(); i++) {
					WorkFlowOption.validateJsonObject(jsonArrayotherOptions.get(i).getAsJsonObject());
				}
				;
			}
		}
		if (jsonObj.get("upgradeOptions") != null && !jsonObj.get("upgradeOptions").isJsonNull()) {
			JsonArray jsonArrayupgradeOptions = jsonObj.getAsJsonArray("upgradeOptions");
			if (jsonArrayupgradeOptions != null) {
				// ensure the json data is an array
				if (!jsonObj.get("upgradeOptions").isJsonArray()) {
					throw new IllegalArgumentException(String.format(
							"Expected the field `upgradeOptions` to be an array in the JSON string but got `%s`",
							jsonObj.get("upgradeOptions").toString()));
				}

				// validate the optional field `upgradeOptions` (array)
				for (int i = 0; i < jsonArrayupgradeOptions.size(); i++) {
					WorkFlowOption.validateJsonObject(jsonArrayupgradeOptions.get(i).getAsJsonObject());
				}
				;
			}
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {

		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!WorkFlowOptions.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'WorkFlowOptions' and its
								// subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<WorkFlowOptions> thisAdapter = gson.getDelegateAdapter(this,
					TypeToken.get(WorkFlowOptions.class));

			return (TypeAdapter<T>) new TypeAdapter<WorkFlowOptions>() {
				@Override
				public void write(JsonWriter out, WorkFlowOptions value) throws IOException {
					JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
					elementAdapter.write(out, obj);
				}

				@Override
				public WorkFlowOptions read(JsonReader in) throws IOException {
					JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
					validateJsonObject(jsonObj);
					return thisAdapter.fromJsonTree(jsonObj);
				}

			}.nullSafe();
		}

	}

	/**
	 * Create an instance of WorkFlowOptions given an JSON string
	 * @param jsonString JSON string
	 * @return An instance of WorkFlowOptions
	 * @throws IOException if the JSON string is invalid with respect to WorkFlowOptions
	 */
	public static WorkFlowOptions fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, WorkFlowOptions.class);
	}

	/**
	 * Convert an instance of WorkFlowOptions to an JSON string
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}

}
